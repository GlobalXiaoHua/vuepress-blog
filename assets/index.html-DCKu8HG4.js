import{_ as e,r as c,c as l,a,b as p,d as s,e as o,w as i,o as u}from"./app-DXtlDOGr.js";const r="/assets/image-20231024083332211-C5icSTrt.png",k="/assets/image-20231024083529260-Bz7U40Tt.png",d="/assets/image-20231024083800221-DpXs6NSd.png",m="/assets/image-20231024083841914-CPl4bzQA.png",v="/assets/image-20231024084002731-DSgry-Mk.png",g="/assets/image-20231024084051373-BZ1DiCsa.png",b="/assets/image-20231024084143595-EqI9uezW.png",h="/assets/image-20231024084223984-SgdQwUR1.png",f="/assets/image-20240602172118615-CY97x7N8.png",y="/assets/image-20231215212553574-DTiGzcQW.png",w="/assets/image-20231024083529260-Bz7U40Tt.png",_="/assets/image-20231215213706566-CargvD9O.png",q="/assets/image-20231215215850550-DFCyoF5x.png",x="/assets/image-20231215222315367-C8vkD6QF.png",j="/assets/image-20231215222412602-D42f5THW.png",S="/assets/image-20231215222702808-CtgZASNc.png",I="/assets/image-20231215222902035-DXHtpjdk.png",C="/assets/image-20231215223810522-CMxID-NB.png",P="/assets/image-20231215232414571-y6YmXuuz.png",K={};function T(A,n){const t=c("font");return u(),l("div",null,[n[3]||(n[3]=a('<h1 id="_1-消息中间件概述" tabindex="-1"><a class="header-anchor" href="#_1-消息中间件概述"><span>1 消息中间件概述</span></a></h1><h2 id="_1-1-消息队列简介" tabindex="-1"><a class="header-anchor" href="#_1-1-消息队列简介"><span>1.1 消息队列简介</span></a></h2><p>消息队列(message queue)简称MQ，是一种以“<strong>先进先出</strong>”的数据结构为基础的消息服务器。</p><p>消息：两个系统间要传输的数据</p><p>作用：实现消息的传递</p><p>原始的数据传递方式：</p><p><img src="'+r+'" alt="image-20231024083332211"></p><p>上述的数据传输方式为同步传输【作为调用方必须等待被调用方执行完毕以后，才可以继续传递消息】，同步传输存在的弊端：<strong>传输效率较低</strong>。</p><p>基于MQ实现消息的传输，如下图所示：</p><p><img src="'+k+'" alt="image-20231024083529260"></p><p>上述的数据的传输方式属于异步传输【作为调用方法不用等待被调用方执行完毕就可以接续传递消息】，数据传输的效率较高。</p><h2 id="_1-2-消息队列应用场景" tabindex="-1"><a class="header-anchor" href="#_1-2-消息队列应用场景"><span>1.2 消息队列应用场景</span></a></h2><p>首先我们先说一下消息中间件的主要的作用：</p><p><strong>[1]系统解耦</strong></p><p><strong>[2]流量消锋</strong></p><p><strong>[3]数据分发</strong></p><p>上面的三点是我们使用消息中间件最主要的目的。</p><h3 id="_1-2-1-系统解耦" tabindex="-1"><a class="header-anchor" href="#_1-2-1-系统解耦"><span>1.2.1 系统解耦</span></a></h3><p>系统的耦合性越高，<strong>容错性</strong>【是指<a href="https://baike.baidu.com/item/%E7%B3%BB%E7%BB%9F/479832" target="_blank" rel="noopener noreferrer">系统</a>在部分组件（一个或多个）发生故障时仍能正常运作的能力】就越低。以电商应用为例，用户创建订单后，如果耦合调用库存系统、物流系统、支付系统，任何一个子系统出了故障或者因为升级等原因暂时不可用，都会造成下单操作异常，影响用户使用体验。</p><p>如下下图所示：</p><p><img src="'+d+'" alt="image-20231024083800221"></p><p>使用消息队列以后，整个下单操作的架构如下图所示：</p><p><img src="'+m+'" alt="image-20231024083841914"></p><p>使用消息队列解耦合，系统的耦合性就会降低了，容错性就提高了。比如物流系统发生故障，需要几分钟才能来修复，在这段时间内，物流系统要处理的数据被缓存到消息队列中，用户的下单操作正常完成。当物流系统回复后，补充处理存在消息队列中的订单消息即可，终端系统感知不到物流系统发生过几分钟故障。</p><h3 id="_1-2-2-流量消锋" tabindex="-1"><a class="header-anchor" href="#_1-2-2-流量消锋"><span>1.2.2 流量消锋</span></a></h3><p>流量消锋：消除系统中的高峰值流量(流量可以理解为就是请求)</p><p>现有一个电商系统下单初始架构如下所示：</p><p><img src="'+v+'" alt="image-20231024084002731"></p><p>假设用户每秒需要发送5k个请求，而我们的A系统每秒只能处理2K个请求，这样就会导致大量的下单请求失败。而且由于实际请求的数量远远超过系统的处理能力，此时也有可能导致系统宕机。</p><p>使用消息队列改进以后的架构如下所示：</p><p><img src="'+g+'" alt="image-20231024084051373"></p><p>用户每秒发送5k个请求，我们可以先将下单请求数据存储到MQ中，此时在MQ中就缓存了很多的下单请求数据，而A系统根据自己的处理能力从MQ中获取数据进行下单操作，有了MQ的缓存层以后，就可以保证每一个用户的下单请求可以得到正常的处理，并且这样可以大大提高系统的稳定性和用户体验。</p><h3 id="_1-2-3-异步通信" tabindex="-1"><a class="header-anchor" href="#_1-2-3-异步通信"><span>1.2.3 异步通信</span></a></h3><p>假设A系统进行了某一个业务操作以后，需要将这个业务操作结果通知给其他的系统，原始的架构如下所示：</p><p><img src="'+b+'" alt="image-20231024084143595"></p><p>此时B系统、C系统、D系统就需要提供对应的接口，然后让A系统进行调用。如果此时不需要通知D系统了，那么就需要更改A系统的代码，将调用D系统的代码删除掉。并且如此时项目中添加了一个新的系统E，A系统也需要将处理结果通知给E系统，那么同时也需要更改A系统的代码。这样就不利于后期的维护。</p><p>使用MQ改进以后的架构如下所示：</p><p><img src="'+h+'" alt="image-20231024084223984"></p><p>A系统需要将业务操作结果通知给其他的系统时，A系统只需要将结果发送到MQ中。其他的系统只需要从MQ中获取结果即可，如果不需要结果了，此时只需要取消从MQ中获取结果的操作即可。并且如果新增了一个系统需要获取结果，只需要从MQ中获取结果数据就可以了，A系统的代码不需要进行改动。这样就大大的提高了系统的维护性。</p><h2 id="_1-3-mq的优缺点" tabindex="-1"><a class="header-anchor" href="#_1-3-mq的优缺点"><span>1.3 MQ的优缺点</span></a></h2><p>优点：</p><p>1、应用解耦提高了系统的容错性</p><p>2、流量消锋提高了系统的并发能力</p><p>3、异步通信提高了系统的可维护性</p><p>缺点：</p><p>1、系统可用性降低：系统引入的外部依赖越多，系统稳定性越差。一旦MQ宕机，就会对业务造成影响。</p><p>2、系统复杂度提高：MQ的加入大大增加了系统的复杂度。</p><p>MQ的选择依据是什么? 调用方是否需要获取到被调用方的执行结果，如果需要获取到结果，那么就需要使用同步通信，如果不需要就可以使用异步通信。</p><h2 id="_1-4-kafka简介" tabindex="-1"><a class="header-anchor" href="#_1-4-kafka简介"><span>1.4 Kafka简介</span></a></h2><p>Kafka是Apache开源的一款基于zookeeper协调的分布式消息系统，具有高吞吐率、高性能、实时、高可靠等特点，可实时处理流式数据。它最初由LinkedIn公司开发，使用Scala语言编写。</p><p>Kafka历经数年的发展，从最初纯粹的消息引擎，到近几年开始在流处理平台生态圈发力，多个组织或公司发布了各种不同特性的产品。</p><p>常见产品如下：</p>',52)),p("p",null,[n[1]||(n[1]=s("1、")),o(t,{color:"red"},{default:i(()=>n[0]||(n[0]=[p("strong",null,"Apache Kafka",-1),s(" ：最“正统”的Kafka也是开源版，它是后面其他所有发行版的基础")])),_:1}),n[2]||(n[2]=s("。"))]),n[4]||(n[4]=a('<p>2、Cloudera/Hortonworks Kafka: 集成了目前主流的大数据框架，能够帮助用户实现从分布式存储、集群调度、流处理到机器学习、实时数据库等全方位的数据理。</p><p>3、Confluent Kafka ：主要提供基于Kafka的企业级流处理解决方案。</p><p>Apache Kafka，它现在依然是开发人数最多、版本迭代速度最快的Kafka，我们使用此产品学习。我们使用版本<strong>kafka_2.13-2.8.1</strong></p><p>官网地址：https://kafka.apache.org/</p><p>下载：https://kafka.apache.org/downloads</p><h2 id="_1-5-mq产品比对" tabindex="-1"><a class="header-anchor" href="#_1-5-mq产品比对"><span>1.5 MQ产品比对</span></a></h2><p>市面上常见的消息队列产品：</p><p>1、ActiveMQ</p><p>2、RabbitMQ</p><p>3、RocketMQ</p><p>4、Kafka</p><p>常见特性比对：</p><table><thead><tr><th>**特性 **</th><th>**ActiveMQ **</th><th><strong>RabbitMQ</strong></th><th><strong>RocketMQ</strong></th><th><strong>Kafka</strong></th></tr></thead><tbody><tr><td>开发语言</td><td>java</td><td>erlang</td><td>java</td><td>scala</td></tr><tr><td>单机吞吐量</td><td>万级</td><td>万级</td><td>10万级</td><td>100万级</td></tr><tr><td>时效性</td><td>ms</td><td>us</td><td>ms</td><td>ms级以内</td></tr><tr><td>可用性</td><td>高（主从）</td><td>高（主从）</td><td>非常高（分布式）</td><td>非常高（分布式）</td></tr><tr><td>功能特性</td><td>成熟的产品、较全的文档、各种协议支持好</td><td>并发能力强、性能好、延迟低，社区活跃度高，数据量没有那么大，优先选择功能比较完备的RabbitMQ</td><td>MQ功能比较完善，扩展性佳，可靠性要求高的金融互联网领域使用多,稳定性高，经历了多次阿里双11考验</td><td>只支持主要的MQ功能，大数据领域使用多，追求高吞吐量，适合产生大量数据的互联网服务的数据收集业务</td></tr></tbody></table><h1 id="_2-kafka环境搭建" tabindex="-1"><a class="header-anchor" href="#_2-kafka环境搭建"><span>2 Kafka环境搭建</span></a></h1><h2 id="_2-1-kafka集群机制" tabindex="-1"><a class="header-anchor" href="#_2-1-kafka集群机制"><span>2.1 Kafka集群机制</span></a></h2><p>集群机制说明：</p><p>1、Kafka是<strong>天然支持集群</strong>的，哪怕是一个节点实际上也是集群模式</p><p>2、Kafka集群依赖于zookeeper进行协调，并且在早期的Kafka版本中很多数据都是存放在Zookeeper中的</p><p>3、Kafka节点只要注册到同一个Zookeeper上就代表它们是同一个集群的</p><p>4、Kafka通过brokerId来区分集群中的不同节点</p><h2 id="_2-2-kafka基础架构" tabindex="-1"><a class="header-anchor" href="#_2-2-kafka基础架构"><span>2.2 Kafka基础架构</span></a></h2><p><img src="'+f+`" alt="image-20240602172118615"></p><p>Kafka的核心角色介绍：</p><table><thead><tr><th>**角色名称 **</th><th><strong>具体含义</strong></th></tr></thead><tbody><tr><td>Broker</td><td>Broker是一个kafka实例，简单说就是一台kafka服务器，kafkaCluster表示集群。</td></tr><tr><td>Topic</td><td>主题 ,Kafka将<strong>消息进行分类</strong>，每一类的消息称之为一个主题。</td></tr><tr><td>Producer</td><td>生产者，可以向Broker topic 发布消息的客户端。</td></tr><tr><td>Consumer</td><td>消费者，从Broker topic 订阅消息的客户端。</td></tr><tr><td>Partition</td><td>Topic的分区，每个 Topic 可以有多个分区，同一个Topic 在不同分区的数据是不重复的。每个partition都由一系列有序的、不可变的消息组成，这些消息被连续的追加到partition中。<strong>分区作用是做负载，提高 kafka 的吞吐量。</strong></td></tr><tr><td>Replication</td><td>Partition(分区)的副本。每个分区可以有多个Replication，由一个Leader和若干个Follower组成。Leader负责接收生产者push的消息和消费者poll消费消息。Follower会实时从自己的Leader中同步数据保持同步。Leader故障时,某个Follower会上位为新的Leader。<strong>分区副本的作用是保证高可用。</strong></td></tr><tr><td>ConsumerGroup</td><td>同一个消费者组中的多个消费者<strong>分摊</strong>一个topic中的消息，不同消费者组中的多个消费者<strong>共同</strong>消费一个topic中的相同消息</td></tr><tr><td>In-sync Replicas（ISR）</td><td>（ISR）已同步副本：表示存活且副本都已和Leader同步的的broker集合，是Leader所有replicas副本的子集。如果某个副本节点宕机，该副本就会从ISR集合中剔除。</td></tr><tr><td>ZooKeeper</td><td>Kafka使用ZooKeeper来进行集群管理、协调和元数据存储。Kafka中的Broker、Topic、Consumer都会注册到zookeeper。</td></tr></tbody></table><h2 id="_2-3-kafka集群搭建" tabindex="-1"><a class="header-anchor" href="#_2-3-kafka集群搭建"><span>2.3 Kafka集群搭建</span></a></h2><p>为了测试方便，我们选择搭建伪分布式Kafka集群，在同一台虚拟机上启动<strong>一个zookeeper实例</strong>，<strong>三个Kafka实例</strong>。并且使用docker compose进行搭建，具体的docker compose文件的内容参考课程资料: <strong>docker-compose-kafka.yml</strong></p><p>访问EFAK账号和密码： admin/123456</p><h2 id="_2-4-kafka集群测试" tabindex="-1"><a class="header-anchor" href="#_2-4-kafka集群测试"><span>2.4 Kafka集群测试</span></a></h2><p><strong>进入任意一个容器：</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> kafka1 /bin/bash</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>topic操作相关命令</strong>：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 创建主题</span></span>
<span class="line">kafka-topics.sh <span class="token parameter variable">--create</span> <span class="token parameter variable">--topic</span> hellokafka-topic --bootstrap-server <span class="token number">192.168</span>.100.102:9092</span>
<span class="line">kafka-topics.sh <span class="token parameter variable">--create</span> <span class="token parameter variable">--topic</span> hellokafka-topic1 --bootstrap-server <span class="token number">192.168</span>.100.102:9093</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 建立3个分区并给每个分区建立3个副本</span></span>
<span class="line">kafka-topics.sh <span class="token parameter variable">--create</span> <span class="token parameter variable">--topic</span> myclustertopic <span class="token parameter variable">--partitions</span> <span class="token number">3</span> --replication-factor <span class="token number">3</span> --bootstrap-server <span class="token number">192.168</span>.100.102:9092</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 查看系统中的topic，可以尝试从其他的节点上进操作</span></span>
<span class="line">kafka-topics.sh <span class="token parameter variable">--list</span> --bootstrap-server <span class="token number">192.168</span>.100.102:9092</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 查看topic的详情信息</span></span>
<span class="line">kafka-topics.sh <span class="token parameter variable">--describe</span> <span class="token parameter variable">--topic</span> hellokafka-topic --bootstrap-server <span class="token number">192.168</span>.100.102:9092     </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查询信息说明：</p><blockquote><p>Topic: 主题名称</p><p>TopicId： 主题id</p><p>PartitionCount：分区个数</p><p>ReplicationFactor：副本数</p><p>Configs： 主题配置信息</p><p>Partition：分区id</p><p>Leader：主分区所在的节点id</p><p>Replicas：副本分区所在的节点id</p><p>Isr：已同步副本所在的节点id</p></blockquote><p><strong>发送以及接收消息：</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 使用生产者脚本发送消息</span></span>
<span class="line">kafka-console-producer.sh  <span class="token parameter variable">--topic</span> hellokafka-topic --bootstrap-server <span class="token number">192.168</span>.100.102:9092</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 使用生产者脚本接收消息</span></span>
<span class="line"><span class="token comment"># 从当前位置开始消费</span></span>
<span class="line">kafka-console-consumer.sh <span class="token parameter variable">--topic</span> hellokafka-topic --bootstrap-server <span class="token number">192.168</span>.100.102:9092</span>
<span class="line"></span>
<span class="line"><span class="token comment"># --from-beginning: 表示从最开始的位置进行消费消费</span></span>
<span class="line">kafka-console-consumer.sh <span class="token parameter variable">--topic</span> hellokafka-topic --from-beginning --bootstrap-server <span class="token number">192.168</span>.100.102:9092</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：EFAK删除主题的时候获取admin token需要进入到容器中，查看system-config.properties配置文件进行获取。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">docker exec -it eagle /bin/bash</span>
<span class="line">cat conf/system-config.properties</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">得到如下配置：可知token是keadmin</span>
<span class="line">######################################</span>
<span class="line"># delete kafka topic token</span>
<span class="line"># Set to delete the topic token, so that administrators can have the right to delete</span>
<span class="line">######################################</span>
<span class="line">efak.topic.token=keadmin</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="_3-java-api入门案例" tabindex="-1"><a class="header-anchor" href="#_3-java-api入门案例"><span>3 Java API入门案例</span></a></h1><h2 id="_3-1-发送消息" tabindex="-1"><a class="header-anchor" href="#_3-1-发送消息"><span>3.1 发送消息</span></a></h2><p>具体步骤如下所示：</p><p>1、创建一个kafka-parent父工程，删除src目录，并加入如下依赖：</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token comment">&lt;!-- 父工程 ， JDK选择17 --&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.0.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token comment">&lt;!--kafka-clients 2023.8--&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.kafka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>kafka-clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.5.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、在kafka-parent父工程下创建kafka-producer子工程</p><p>3、创建启动类</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>kafka</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@SpringBootApplication</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProducerApplication</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ProducerApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4、导入课程资料的logback-spring.xml</p><p>5、生产者代码实现：</p><p>官网示例代码：https://kafka.apache.org/35/javadoc/org/apache/kafka/clients/producer/KafkaProducer.html</p><p>测试代码：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 可以事先不用创建主题，会自动创建</span></span>
<span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>kafka</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token class-name">ProducerApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProducerDemo01</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 主题名称</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">TOPIC_NAME</span> <span class="token operator">=</span> <span class="token string">&quot;hellokafka&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 创建生产者属性对象</span></span>
<span class="line">        <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span></span>
<span class="line">        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">BOOTSTRAP_SERVERS_CONFIG</span> <span class="token punctuation">,</span> <span class="token string">&quot;192.168.100.102:9092&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span></span>
<span class="line">        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">KEY_SERIALIZER_CLASS_CONFIG</span> <span class="token punctuation">,</span> <span class="token string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span></span>
<span class="line">        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">VALUE_SERIALIZER_CLASS_CONFIG</span> <span class="token punctuation">,</span> <span class="token string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 创建生产者对象</span></span>
<span class="line">        <span class="token class-name">KafkaProducer</span> kafkaProducer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaProducer</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span> <span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 调用send方法发送消息</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 调用send方法发送消息</span></span>
<span class="line">            <span class="token class-name">ProducerRecord</span> producerRecord <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProducerRecord</span><span class="token punctuation">(</span><span class="token constant">TOPIC_NAME</span> <span class="token punctuation">,</span> <span class="token string">&quot;helloKafka~&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token punctuation">;</span></span>
<span class="line">            kafkaProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>producerRecord<span class="token punctuation">)</span> <span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 关闭资源</span></span>
<span class="line">        kafkaProducer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>消息发送完毕以后可以通过eagle系统查看主题消息。</p><h2 id="_3-2-消费消息" tabindex="-1"><a class="header-anchor" href="#_3-2-消费消息"><span>3.2 消费消息</span></a></h2><p>具体步骤如下所示：</p><p>1、在kafka-parent父工程下创建kafka-consumer子工程</p><p>2、创建启动类</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>kafka</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@SpringBootApplication</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumerApplication</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ConsumerApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、消费者代码实现：</p><p>官网示例代码：https://kafka.apache.org/35/javadoc/org/apache/kafka/clients/consumer/KafkaConsumer.html</p><p>测试代码：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>kafka</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token class-name">ConsumerApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumerDemo01</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 定义主题</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">TOPIC_NAME</span> <span class="token operator">=</span> <span class="token string">&quot;hellokafka&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">consumerMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 创建属性对象</span></span>
<span class="line">        <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span></span>
<span class="line">        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ConsumerConfig</span><span class="token punctuation">.</span><span class="token constant">BOOTSTRAP_SERVERS_CONFIG</span> <span class="token punctuation">,</span> <span class="token string">&quot;192.168.100.102:9092&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span></span>
<span class="line">        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ConsumerConfig</span><span class="token punctuation">.</span><span class="token constant">GROUP_ID_CONFIG</span> <span class="token punctuation">,</span> <span class="token string">&quot;group01&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span></span>
<span class="line">        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ConsumerConfig</span><span class="token punctuation">.</span><span class="token constant">KEY_DESERIALIZER_CLASS_CONFIG</span> <span class="token punctuation">,</span> <span class="token string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span></span>
<span class="line">        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ConsumerConfig</span><span class="token punctuation">.</span><span class="token constant">VALUE_DESERIALIZER_CLASS_CONFIG</span> <span class="token punctuation">,</span> <span class="token string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// earliest：最开始第一次向一个topic发消息时，如果没有消费位移，那么此时从最早（最小）偏移量开始读取消息</span></span>
<span class="line">        <span class="token comment">// latest：最开始第一次向一个topic发消息时，如果没有消费位移，那么此时从最新（最大）偏移量开始读取消息</span></span>
<span class="line">        <span class="token comment">// 查看消费位移的命令如下：</span></span>
<span class="line">        <span class="token comment">// kafka-consumer-groups.sh --bootstrap-server localhost:9092 --group group01 --describe</span></span>
<span class="line">        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ConsumerConfig</span><span class="token punctuation">.</span><span class="token constant">AUTO_OFFSET_RESET_CONFIG</span> <span class="token punctuation">,</span> <span class="token string">&quot;earliest&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>   </span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 创建消费者对象</span></span>
<span class="line">        <span class="token class-name">KafkaConsumer</span> kafkaConsumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaConsumer</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span> <span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 订阅主题</span></span>
<span class="line">        kafkaConsumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token constant">TOPIC_NAME</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// 消费消息</span></span>
<span class="line">            <span class="token class-name">ConsumerRecords</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span> <span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> consumerRecords <span class="token operator">=</span> kafkaConsumer<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 参数表示拉取消息的时间间隔</span></span>
<span class="line">            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ConsumerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span> <span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> record <span class="token operator">:</span> consumerRecords<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;offset = %d, key = %s, value = %s%n&quot;</span><span class="token punctuation">,</span> record<span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> record<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> record<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// offset表示消费位移</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="_4-spring-boot集成kafka" tabindex="-1"><a class="header-anchor" href="#_4-spring-boot集成kafka"><span>4 Spring Boot集成Kafka</span></a></h1><h2 id="_4-1-生产者" tabindex="-1"><a class="header-anchor" href="#_4-1-生产者"><span>4.1 生产者</span></a></h2><h3 id="_4-1-1-环境搭建" tabindex="-1"><a class="header-anchor" href="#_4-1-1-环境搭建"><span>4.1.1 环境搭建</span></a></h3><p>具体步骤如下所示：</p><p>1、创建一个spring-kafka父工程，并添加如下依赖</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.0.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">&lt;!-- web开发起步依赖 --&gt;</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">&lt;!-- lombok依赖 --&gt;</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">&lt;!-- spring boot和junit整合时候的起步依赖 --&gt;</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">&lt;!--spring-kafka--&gt;</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.kafka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-kafka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">&lt;!--hutool--&gt;</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>cn.hutool<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>hutool-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.8.19<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    </span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludes</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>excludes</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、在spring-kafka父工程下创建spring-kafka-producer子工程</p><p>3、创建启动类</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>kafka</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@SpringBootApplication</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProducerApplication</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ProducerApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4、在spring-kafka-producer子工程中添加application.yml配置文件，并且添加如下配置内容</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token comment"># application.yml</span></span>
<span class="line"><span class="token key atrule">server</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 生产者配置</span></span>
<span class="line"><span class="token key atrule">spring</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">kafka</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">bootstrap-servers</span><span class="token punctuation">:</span> 192.168.100.102<span class="token punctuation">:</span><span class="token number">9092</span><span class="token punctuation">,</span>192.168.100.102<span class="token punctuation">:</span><span class="token number">9093</span><span class="token punctuation">,</span>192.168.100.102<span class="token punctuation">:</span><span class="token number">9094</span></span>
<span class="line">    <span class="token key atrule">producer</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">acks</span><span class="token punctuation">:</span> <span class="token number">-1</span></span>
<span class="line">      <span class="token key atrule">retries</span><span class="token punctuation">:</span> <span class="token number">0</span></span>
<span class="line">      <span class="token key atrule">batch-size</span><span class="token punctuation">:</span> <span class="token number">16384</span> <span class="token comment"># 批次大小 单位byte</span></span>
<span class="line">      <span class="token key atrule">buffer-memory</span><span class="token punctuation">:</span> <span class="token number">33554432</span></span>
<span class="line">      <span class="token key atrule">compression-type</span><span class="token punctuation">:</span> gzip</span>
<span class="line">      <span class="token key atrule">key-serializer</span><span class="token punctuation">:</span> org.apache.kafka.common.serialization.StringSerializer <span class="token comment"># key的序列化器</span></span>
<span class="line">      <span class="token key atrule">value-serializer</span><span class="token punctuation">:</span> org.apache.kafka.common.serialization.StringSerializer <span class="token comment"># value的序列化器</span></span>
<span class="line">      <span class="token key atrule">properties</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token key atrule">&#39;linger.ms&#39;</span><span class="token punctuation">:</span> <span class="token number">10</span></span>
<span class="line">      <span class="token punctuation">}</span>   <span class="token comment"># 配置其他的属性</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5、创建主题配置类</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KafkaConfig</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">NewTopic</span> <span class="token function">springTestTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">TopicBuilder</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">&quot;topic-01&quot;</span><span class="token punctuation">)</span> <span class="token comment">//主题名称</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">partitions</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">//分区数量</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">replicas</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">//副本数量</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>6、启动主类</p><p>7、启动程序通过eagle查看主题创建情况</p><h3 id="_4-1-2-发送消息" tabindex="-1"><a class="header-anchor" href="#_4-1-2-发送消息"><span>4.1.2 发送消息</span></a></h3><p>创建测试类通过<strong>KafkaTemplate</strong>发送消息,代码如下所示：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>test</span></span>
<span class="line">    </span>
<span class="line"><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token class-name">ProducerApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProducerApplicationTest</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Autowired</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">KafkaTemplate</span> kafkaTemplate <span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        kafkaTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;topic-01&quot;</span> <span class="token punctuation">,</span> <span class="token string">&quot;kafka...producer...send...message...&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行测试代码，通过Eagle控制台可以查看到消息发送成功。</p><h3 id="_4-1-3-发送方式" tabindex="-1"><a class="header-anchor" href="#_4-1-3-发送方式"><span>4.1.3 发送方式</span></a></h3><p>生产者发送消息存在三种方式：</p><h4 id="_1、不关心发送结果" tabindex="-1"><a class="header-anchor" href="#_1、不关心发送结果"><span>1、不关心发送结果</span></a></h4><p>把消息发送给服务器，但并不关心它是否正常到达。此种发送消息的方式kafka<strong>吞吐量</strong>最高的一种方式，生产者发送消息后，不需要等待服务器的响应。但是，此种发送消息的方式也是<strong>最不可靠</strong>的一种方式，因为对于发送失败的消息没有做任何处理。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 入门案例的消息发送方式就是该方式</span></span>
<span class="line">kafkaTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;topic-01&quot;</span> <span class="token punctuation">,</span> <span class="token string">&quot;kafka...producer...send...message...&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>特点：性能最好，可靠性最差。</p><h4 id="_2、同步消息发送" tabindex="-1"><a class="header-anchor" href="#_2、同步消息发送"><span>2、同步消息发送</span></a></h4><p>使用send()方法发送消息，它会返回一个CompletableFuture对象，<strong>get方法会一直阻塞直到该线程的任务得到返回值，也就是broker返回发送成功</strong>。如果业务上关心发送结果，那么可以使用同步发送的方式。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 实现通过消息发送就需要在调用完send方法以后，再次调用get方法</span></span>
<span class="line">kafkaTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;topic-01&quot;</span> <span class="token punctuation">,</span> <span class="token string">&quot;kafka...producer...send...message...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>特点：性能最差，可靠性较好。</p><h4 id="_3、异步消息发送" tabindex="-1"><a class="header-anchor" href="#_3、异步消息发送"><span>3、异步消息发送</span></a></h4><p>调用send()方法，并指定一个回调函数，<strong>服务器在返回响应时调用该回调函数</strong>。</p><p>如果业务上关心发送结果，且需要异步发送，那么可以用异步+回调的方式来发送消息。</p><p>注意：由于是异步发送消息，测试的时候可以让线程休眠一会儿以等待回调函数的执行</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 要实现异步消息发送就需要定义生产者监听器，在发送完毕以后就会根据具体的发送结果调用对应的函数，如下所示：</span></span>
<span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>listener</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Component</span></span>
<span class="line"><span class="token annotation punctuation">@Slf4j</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KafkaSendResultHandler</span> <span class="token keyword">implements</span> <span class="token class-name">ProducerListener</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * Kafka发送成功回调</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">producerRecord</span></span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">recordMetadata</span></span>
<span class="line">     */</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span><span class="token class-name">ProducerRecord</span> producerRecord<span class="token punctuation">,</span> <span class="token class-name">RecordMetadata</span> recordMetadata<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">String</span> topic <span class="token operator">=</span> producerRecord<span class="token punctuation">.</span><span class="token function">topic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span> value <span class="token operator">=</span> producerRecord<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Integer</span> partition <span class="token operator">=</span> recordMetadata<span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;topic：{}，value：{}，partition：{}， 发送成功回调&quot;</span><span class="token punctuation">,</span>topic<span class="token punctuation">,</span>value<span class="token punctuation">,</span> partition<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span><span class="token class-name">ProducerRecord</span> producerRecord<span class="token punctuation">,</span> <span class="token class-name">RecordMetadata</span> recordMetadata<span class="token punctuation">,</span> <span class="token class-name">Exception</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">String</span> topic <span class="token operator">=</span> producerRecord<span class="token punctuation">.</span><span class="token function">topic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span> value <span class="token operator">=</span> producerRecord<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;topic：{}，value：{}， 发送失败，原因：{}&quot;</span><span class="token punctuation">,</span>topic<span class="token punctuation">,</span>value<span class="token punctuation">,</span>exception<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-1-4-拦截器配置" tabindex="-1"><a class="header-anchor" href="#_4-1-4-拦截器配置"><span>4.1.4 拦截器配置</span></a></h3><p>Kafka支持在发送消息之前和之后进行拦截，自定义业务逻辑。</p><p>具体使用步骤：</p><p>1、创建拦截器</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>interceptor</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomProducerInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">ProducerInterceptor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span> <span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 发送消息之前的切面拦截</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">ProducerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">onSend</span><span class="token punctuation">(</span><span class="token class-name">ProducerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> record<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;生产者发送前置方法！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span> value <span class="token operator">=</span> <span class="token string">&quot;prefix：&quot;</span><span class="token operator">+</span> record<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ProducerRecord</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span><span class="token function">topic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> record<span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> record<span class="token punctuation">.</span><span class="token function">timestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> record<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">,</span> record<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//	发送消息之后的切面拦截</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAcknowledgement</span><span class="token punctuation">(</span><span class="token class-name">RecordMetadata</span> metadata<span class="token punctuation">,</span> <span class="token class-name">Exception</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;生产者发送后置方法！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 是生产者关闭前调用的方法</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;close方法执行了...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 是拦截器用于配置一些属性的方法</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> configs<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、配置拦截器</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">spring</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">kafka</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">bootstrap-servers</span><span class="token punctuation">:</span> 192.168.136.146<span class="token punctuation">:</span><span class="token number">9092</span><span class="token punctuation">,</span>192.168.136.146<span class="token punctuation">:</span><span class="token number">9093</span><span class="token punctuation">,</span>192.168.136.146<span class="token punctuation">:</span><span class="token number">9094</span></span>
<span class="line">    <span class="token key atrule">producer</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">acks</span><span class="token punctuation">:</span> <span class="token number">-1</span></span>
<span class="line">      <span class="token key atrule">retries</span><span class="token punctuation">:</span> <span class="token number">0</span></span>
<span class="line">      <span class="token key atrule">batch-size</span><span class="token punctuation">:</span> <span class="token number">16384</span> <span class="token comment"># 批次大小 单位byte</span></span>
<span class="line">      <span class="token key atrule">compression-type</span><span class="token punctuation">:</span> gzip</span>
<span class="line">      <span class="token key atrule">key-serializer</span><span class="token punctuation">:</span> org.apache.kafka.common.serialization.StringSerializer <span class="token comment"># key的序列化器</span></span>
<span class="line">      <span class="token key atrule">value-serializer</span><span class="token punctuation">:</span> org.apache.kafka.common.serialization.StringSerializer <span class="token comment"># value的序列化器</span></span>
<span class="line">      <span class="token key atrule">properties</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token key atrule">&#39;linger.ms&#39;</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token punctuation">,</span></span>
<span class="line">        <span class="token key atrule">&#39;interceptor.classes&#39;</span> <span class="token punctuation">:</span> <span class="token string">&quot;com.atguigu.kafka.interceptor.CustomProducerInterceptor&quot;</span> </span>
<span class="line">      <span class="token punctuation">}</span>   <span class="token comment"># 配置其他的属性</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动测试程序进行测试。</p><h3 id="_4-1-5-使用completablefuture" tabindex="-1"><a class="header-anchor" href="#_4-1-5-使用completablefuture"><span>4.1.5 使用CompletableFuture</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SendResult</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> completableFuture <span class="token operator">=</span> kafkaTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;topic-01&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;kafka...producer...send...message...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//执行成功回调</span></span>
<span class="line">    completableFuture<span class="token punctuation">.</span><span class="token function">thenAccept</span><span class="token punctuation">(</span>result <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;kafka发送消息成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">//执行失败回调</span></span>
<span class="line">    completableFuture<span class="token punctuation">.</span><span class="token function">exceptionally</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//发送失败，记录日志或者采取重发策略</span></span>
<span class="line">        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;kafka发送消息失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-1-6-分区" tabindex="-1"><a class="header-anchor" href="#_4-1-6-分区"><span>4.1.6 分区</span></a></h3><p>1、未指定key和partition</p><p><strong>未指定key</strong>：Kafka采用Sticky Partition（黏性分区）, 会随机选择一个分区，并尽可能一直使用该分区，待该分区的batch（默认16k）已满或者已完成，Kafka再随机一个分区进行使用（和上一次的分区不同）</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendPartition01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        kafkaTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;topic-01&quot;</span> <span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment">//get确保顺序</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、指定partition</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendPartition02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    kafkaTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;topic-01&quot;</span> <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、指定key</p><p><strong>指定key</strong>：使用murmur2hash算法计算key的hash值与topic的partition数进行取余得到partition值</p><p>例如：key1的hash值=5， key2的hash值=6 ，topic的partition数=2，那么key1 对应的value1写入1号分区(5÷2余数1)，key2对应的value2写入0号分区(6÷2余数0)。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendPartition03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        kafkaTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;topic-01&quot;</span> <span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;hello~a~&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        kafkaTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;topic-01&quot;</span> <span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;hello~b~&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、指定分区器：</p><p>指定轮询分区器：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">spring</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">kafka</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">bootstrap-servers</span><span class="token punctuation">:</span> 192.168.136.146<span class="token punctuation">:</span><span class="token number">9092</span><span class="token punctuation">,</span>192.168.136.146<span class="token punctuation">:</span><span class="token number">9093</span><span class="token punctuation">,</span>192.168.136.146<span class="token punctuation">:</span><span class="token number">9094</span></span>
<span class="line">    <span class="token key atrule">producer</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">acks</span><span class="token punctuation">:</span> <span class="token number">-1</span></span>
<span class="line">      <span class="token key atrule">retries</span><span class="token punctuation">:</span> <span class="token number">0</span></span>
<span class="line">      <span class="token key atrule">batch-size</span><span class="token punctuation">:</span> <span class="token number">16384</span> <span class="token comment"># 批次大小 单位byte</span></span>
<span class="line">      <span class="token key atrule">compression-type</span><span class="token punctuation">:</span> gzip</span>
<span class="line">      <span class="token key atrule">key-serializer</span><span class="token punctuation">:</span> org.apache.kafka.common.serialization.StringSerializer <span class="token comment"># key的序列化器</span></span>
<span class="line">      <span class="token key atrule">value-serializer</span><span class="token punctuation">:</span> org.apache.kafka.common.serialization.StringSerializer <span class="token comment"># value的序列化器</span></span>
<span class="line">      <span class="token key atrule">properties</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token key atrule">&#39;linger.ms&#39;</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token punctuation">,</span></span>
<span class="line">        <span class="token key atrule">&#39;interceptor.classes&#39;</span> <span class="token punctuation">:</span> <span class="token string">&quot;com.atguigu.kafka.interceptor.CustomProducerInterceptor&quot;</span> <span class="token punctuation">,</span></span>
<span class="line">        <span class="token key atrule">&#39;partitioner.class&#39;</span><span class="token punctuation">:</span> <span class="token string">&quot;org.apache.kafka.clients.producer.RoundRobinPartitioner&quot;</span></span>
<span class="line">      <span class="token punctuation">}</span>   <span class="token comment"># 配置其他的属性</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendPartition04</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        kafkaTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;topic-01&quot;</span> <span class="token punctuation">,</span> <span class="token string">&quot;hello~&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、自定义分区器</p><p>定义分区器</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>partitioner</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomPartitioner</span> <span class="token keyword">implements</span> <span class="token class-name">Partitioner</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token class-name">String</span> topic<span class="token punctuation">,</span> <span class="token class-name">Object</span> key<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keyBytes<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> valueBytes<span class="token punctuation">,</span> <span class="token class-name">Cluster</span> cluster<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 获取消息</span></span>
<span class="line">        <span class="token class-name">String</span> msgValue <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>msgValue<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;atguigu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">// 大于1个分区,消息中包含atguigu的消息发往0号分区</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;消息发访问0号分区....&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 其他消息随机发往其他的分区</span></span>
<span class="line">        <span class="token comment">// 获取可用的分区</span></span>
<span class="line">        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PartitionInfo</span><span class="token punctuation">&gt;</span></span> partitionInfos <span class="token operator">=</span> cluster<span class="token punctuation">.</span><span class="token function">availablePartitionsForTopic</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">int</span> partitionCount <span class="token operator">=</span> partitionInfos<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//输出一个在 1 和 partitionCount - 1 之间的随机整数（包括 1，但不包括 partitionCount）</span></span>
<span class="line">        <span class="token keyword">int</span> index <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> partitionCount<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;消息访问&quot;</span> <span class="token operator">+</span> index <span class="token operator">+</span><span class="token string">&quot;号分区....&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> index<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> configs<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">&#39;partitioner.class&#39;</span><span class="token punctuation">:</span> <span class="token string">&quot;com.atguigu.kafka.partitioner.CustomPartitioner&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>测试：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendPartition05</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        kafkaTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;topic-01&quot;</span> <span class="token punctuation">,</span> <span class="token string">&quot;atguigu~&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        kafkaTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;topic-01&quot;</span> <span class="token punctuation">,</span> <span class="token string">&quot;hello~&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-1-7-生产者常见属性" tabindex="-1"><a class="header-anchor" href="#_4-1-7-生产者常见属性"><span>4.1.7 生产者常见属性</span></a></h3><p>生产者还有很多可配置的参数，在 Kafka文档里都有说明，它们大部分都有合理的默认 值，所以没有必要去修改它们 。不过有几个参数在内存使用、性能和可靠性方面对生产者影响比较大，接下来我们会一一说明。</p><p>官网地址：https://kafka.apache.org/28/documentation.html#producerconfigs</p><h4 id="batch-size" tabindex="-1"><a class="header-anchor" href="#batch-size"><span>batch.size</span></a></h4><p>作用：该参数指定了一个批次(ProducerBatch)可以使用的内存大小，按照字节数计算（而不是消息个数）。当批次被填满， 批次里的所有消息会被发送出去。默认值为16384byte(16K)</p><h4 id="linger-ms" tabindex="-1"><a class="header-anchor" href="#linger-ms"><span>linger.ms</span></a></h4><p>作用：该参数指定了生产者在发送批次之前等待更多消息加入批次的时间 。KafkaProduce会在批次填满或linger.ms达到上限时把批次发送出去。</p><p>默认值为0：意思就是消息必须立即被发送，但这样会影响性能，一般设置10毫秒左右，就是说这个消息发送完后会进入本地的一个batch，如果10毫秒内，这个batch满了16kb就会随batch一起被发送出去。如果10毫秒内，batch没满，那么也必须把消息发送出去，不能让消息的发送延迟时间太长！</p><h4 id="buffer-memory" tabindex="-1"><a class="header-anchor" href="#buffer-memory"><span>buffer.memory</span></a></h4><p>设置发送消息的本地缓冲区，消息会先发送到本地缓冲区，可以提高消息发送性能，默认值是33554432，即32MB</p><h4 id="compression-type" tabindex="-1"><a class="header-anchor" href="#compression-type"><span>compression.type</span></a></h4><p>Kafka 的消息压缩是指将消息本身采用特定的压缩算法进行压缩并存储，待消费时再解压。提高了消息的传输效率并且降低了存储压力。</p><p><strong>Kafka中提供了四种压缩算法，对比如下所示：CPU资源充足，带宽资源有限时可以考虑使用压缩算法压缩消息。</strong></p><table><thead><tr><th>压缩类型</th><th>压缩比率</th><th>CPU 使用率</th><th>压缩速度</th><th>带宽使用率</th></tr></thead><tbody><tr><td>gzip</td><td>高</td><td>高</td><td>慢</td><td>低</td></tr><tr><td>snappy</td><td>一般</td><td>一般</td><td>一般</td><td>一般</td></tr><tr><td>lz4</td><td>低</td><td>低</td><td>快</td><td>高</td></tr><tr><td>zstd</td><td>一般</td><td>一般</td><td>一般</td><td>一般</td></tr></tbody></table><h4 id="acks" tabindex="-1"><a class="header-anchor" href="#acks"><span>acks</span></a></h4><p>acks保证生产者可以将消息可靠的发送到达broker。</p><p>常见取值说明：</p><p>1、acks=0：生产者发送过来数据，就不管了，可靠性差数据会丢，效率最高</p><p>2、acks=1：生产者发送过来数据，只需要Leader确认即可返回，可靠性中等，效率中等</p><p>3、acks=-1(all)：生产者发送过来数据，Leader和ISR队列里面所有Follwer应答，可靠性高效率最低</p><p>在生产环境中选择：</p><p>1、acks=0，很少使用</p><p>2、acks=1，一般用于传输普通日志，允许丢个别数据；</p><p>3、aks=-1(all)，一般用于传输重要不能丢失的数据(例如：钱、订单、积分等)，对可靠性要求比较高的场景。</p><h4 id="retries" tabindex="-1"><a class="header-anchor" href="#retries"><span>retries</span></a></h4><p>kafka是一种分布式消息系统，常用于大规模数据的收集和分发。在生产者发送消息到kafka集群的过程中，由于多种原因（网络故障、消息格式问题等），可能会发生消息发送失败。为了提高消息传输的可靠性，kafka提供了一种重试机制，即当消息发送失败时，会自动尝试重新发送直到消息成功被写入kafka。</p><h2 id="_4-2-消费者" tabindex="-1"><a class="header-anchor" href="#_4-2-消费者"><span>4.2 消费者</span></a></h2><h3 id="_4-2-1-环境搭建" tabindex="-1"><a class="header-anchor" href="#_4-2-1-环境搭建"><span>4.2.1 环境搭建</span></a></h3><p>具体步骤如下所示：</p><p>1、在spring-kafka父工程下创建spring-kafka-consumer子工程</p><p>2、创建启动类</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>kafka</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token annotation punctuation">@SpringBootApplication</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumerApplication</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ConsumerApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、创建主题配置类</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KafkaConfig</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">NewTopic</span> <span class="token function">springTestTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">TopicBuilder</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">&quot;topic-01&quot;</span><span class="token punctuation">)</span> <span class="token comment">//主题名称, 该主题不存在直接创建，如果存在就复用</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">partitions</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">//分区数量</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">replicas</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">//副本数量</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4、在application.yml文件中添加如下配置</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">server</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8120</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 消费者配置</span></span>
<span class="line"><span class="token key atrule">spring</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">Kafka</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">bootstrap-servers</span><span class="token punctuation">:</span> 192.168.100.102<span class="token punctuation">:</span><span class="token number">9092</span><span class="token punctuation">,</span>192.168.100.102<span class="token punctuation">:</span><span class="token number">9093</span><span class="token punctuation">,</span>192.168.100.102<span class="token punctuation">:</span><span class="token number">9094</span></span>
<span class="line">    <span class="token key atrule">consumer</span><span class="token punctuation">:</span> <span class="token comment"># consumer消费者配置</span></span>
<span class="line">      <span class="token key atrule">group-id</span><span class="token punctuation">:</span> group03 <span class="token comment"># 默认的消费组ID</span></span>
<span class="line">      <span class="token key atrule">enable-auto-commit</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否进行自动offset提交</span></span>
<span class="line">      <span class="token key atrule">auto-commit-interval</span><span class="token punctuation">:</span> <span class="token number">5000</span> <span class="token comment"># 自动提交offset时间间隔5s。这期间服务异常停止时，再次重启会导致重复消费</span></span>
<span class="line">      <span class="token key atrule">auto-offset-reset</span><span class="token punctuation">:</span> earliest</span>
<span class="line">      <span class="token key atrule">key-deserializer</span><span class="token punctuation">:</span> org.apache.kafka.common.serialization.StringDeserializer</span>
<span class="line">      <span class="token key atrule">value-deserializer</span><span class="token punctuation">:</span> org.apache.kafka.common.serialization.StringDeserializer</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-2-接收消息" tabindex="-1"><a class="header-anchor" href="#_4-2-2-接收消息"><span>4.2.2 接收消息</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>listener</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token annotation punctuation">@Component</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KafkaListeners</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 简单消费：</span>
<span class="line">     * topics：消费的主题列表</span>
<span class="line">     * ConsumerRecord<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String,</span> <span class="token attr-name">String</span><span class="token punctuation">&gt;</span></span> record: 记录对象,封装消息记录的相关数据</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>topics <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;topic-01&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">simpleConsumer</span><span class="token punctuation">(</span><span class="token class-name">ConsumerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> record <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;进入simpleConsumer方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span></span>
<span class="line">                <span class="token string">&quot;分区 = %d, 偏移量 = %d, key = %s, 内容 = %s, 时间戳 = %d%n&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                record<span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                record<span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                record<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                record<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                record<span class="token punctuation">.</span><span class="token function">timestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-3-手动位移提交" tabindex="-1"><a class="header-anchor" href="#_4-2-3-手动位移提交"><span>4.2.3 手动位移提交</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">//消费者KafkaConfig</span></span>
<span class="line"><span class="token annotation punctuation">@Bean</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">NewTopic</span> <span class="token function">springTestTopic2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token class-name">TopicBuilder</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">&quot;topic-02&quot;</span><span class="token punctuation">)</span> <span class="token comment">//主题名称, 该主题不存在直接创建，如果存在就复用</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">partitions</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">//分区数量</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">replicas</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">//副本数量</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4、消费者消息消费完毕以后，进行位移提交</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">//KafkaListeners</span></span>
<span class="line"><span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>topics <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;topic-02&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">simpleConsumer</span><span class="token punctuation">(</span><span class="token class-name">ConsumerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> record <span class="token punctuation">,</span> <span class="token class-name">Consumer</span> consumer<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;进入simpleConsumer方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token string">&quot;主题 = %s, 分区 = %d, 偏移量 = %d, key = %s, 内容 = %s, 时间戳 = %d%n&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        record<span class="token punctuation">.</span><span class="token function">topic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        record<span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        record<span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        record<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        record<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        record<span class="token punctuation">.</span><span class="token function">timestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    consumer<span class="token punctuation">.</span><span class="token function">commitAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 进行手动位移提交</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5、生产者测试</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendTopic02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    kafkaTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;topic-02&quot;</span> <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;hello0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    kafkaTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;topic-02&quot;</span> <span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;hello1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    kafkaTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;topic-02&quot;</span> <span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;hello2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-4-消费异常处理" tabindex="-1"><a class="header-anchor" href="#_4-2-4-消费异常处理"><span>4.2.4 消费异常处理</span></a></h3><p>当消费者对消息消费时，如果发生了异常当然也需要处理一下异常。一般我们在@KafkaListener中，只是监听topic中的主题并消费，如果再<strong>try catch捕获并处理</strong>的话，则会显得代码块非常臃肿不利于维护，kafka为我们提供了专门的异常处理器<strong>ConsumerAwareListenerErrorHandler</strong>，通过它我们可以处理consumer在消费时发生的异常。</p><p>具体使用步骤如下所示：</p><p>1、在spring容器中配置ConsumerAwareListenerErrorHandler</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomListenerErrorHandler</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">ConsumerAwareListenerErrorHandler</span> <span class="token function">listenerErrorHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Message</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> message<span class="token punctuation">,</span> <span class="token class-name">ListenerExecutionFailedException</span> exception<span class="token punctuation">,</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> consumer<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;--- 消费时发生异常 ---&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、消费者使用异常处理器</p><p><img src="`+y+'" alt="image-20231215212553574"></p><h1 id="_5-mq高级内容" tabindex="-1"><a class="header-anchor" href="#_5-mq高级内容"><span>5 MQ高级内容</span></a></h1><h2 id="_5-1-消息可靠性传输" tabindex="-1"><a class="header-anchor" href="#_5-1-消息可靠性传输"><span>5.1 消息可靠性传输</span></a></h2><p>消息的可靠性传输：指消息在整个传输过程中保证消息不丢失。</p><p>消息传输过程回顾：</p><p><img src="'+w+'" alt="image-20231024083529260"></p><p>整个传输过程分为三个阶段：</p><p>1、生产者发生消息到MQ</p><p>2、MQ收到消息保存消息</p><p>3、消费者从MQ中获取消息进行消费</p><p>可靠性保证：</p><p>① 首先需要确保生产者是正常的将消息发给了MQ，可以将<strong>acks的值设置为all</strong></p><p>② 其次要保证MQ中消息的高可用，可以针对<strong>一个分区创建多个副本</strong>，并且将多个副本分散存储到kafka cluster中的每一个节点上</p><p>③ 消费者可以将自动位移提交更改为<strong>手动位移提交</strong></p><h2 id="_5-2-消息顺序消费问题" tabindex="-1"><a class="header-anchor" href="#_5-2-消息顺序消费问题"><span>5.2 消息顺序消费问题</span></a></h2><p>Kafka发送消息的时候，需要通过分区器对消息进行处理，然后将消息发送到指定的分区中：</p><p><img src="'+_+`" alt="image-20231215213706566"></p><p>上述生产者发送了3个消息分别是① ② ③；假设三个消息被分发到了不同的分区中，此时三个消费者分别从每一个分区中获取消息，由于每一个消费者的消费能力可能不同，因此在进行消费的时候可能会出现如下顺序：③ ① ② 就导致消息不是顺序性消费。</p><p>解决思路：将消息发送到<strong>同一个分区</strong>，可以保证消息的局部有序，因为<strong>Kafka可以保证同一个分区的消息是严格有序的，然后设置retries等于0</strong>。(如果不把retries设置为0，某批次的数据发送失败后，进行了重试，也可能出现后边的批次先于它到达的情况)</p><p>解决方案：</p><p>方案一：针对一个topic只创建一个分区</p><p>方案二：通过key将相同类型的消息发送到同一个分区中</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMsgOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">SendResult</span> sr1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SendResult</span><span class="token punctuation">)</span> kafkaTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;partition-consumer-offset&quot;</span> <span class="token punctuation">,</span> <span class="token string">&quot;order-1&quot;</span> <span class="token punctuation">,</span> <span class="token string">&quot;msg03....&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">SendResult</span> sr2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SendResult</span><span class="token punctuation">)</span> kafkaTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;partition-consumer-offset&quot;</span> <span class="token punctuation">,</span> <span class="token string">&quot;order-1&quot;</span> <span class="token punctuation">,</span> <span class="token string">&quot;msg04....&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sr1<span class="token punctuation">.</span><span class="token function">getRecordMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sr2<span class="token punctuation">.</span><span class="token function">getRecordMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 注意：需要使用默认的分区器</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-3-消息重复消费问题" tabindex="-1"><a class="header-anchor" href="#_5-3-消息重复消费问题"><span>5.3 消息重复消费问题</span></a></h2><p>导致出现消息重复消费的情况：</p><p>1、生产者重复发送消息</p><p>2、消费者重复消费消息</p><h3 id="_5-3-1-生产者重复发送消息" tabindex="-1"><a class="header-anchor" href="#_5-3-1-生产者重复发送消息"><span>5.3.1 生产者重复发送消息</span></a></h3><h4 id="原因说明" tabindex="-1"><a class="header-anchor" href="#原因说明"><span>原因说明</span></a></h4><p>生产者发送的消息没有收到Broker正确的响应，导致生产者重试。</p><p>生产者发出一条消息，Broker落盘以后因为网络等种种原因，发送端得到一个发送失败的响应或者网络中断，然后生产者收到一个可恢复的 Exception 重试消息导致消息重复。</p><h4 id="重试过程" tabindex="-1"><a class="header-anchor" href="#重试过程"><span>重试过程</span></a></h4><p><img src="`+q+'" alt="image-20231215215850550"></p><p>主要流程说明：</p><p>1、new KafkaProducer() 后创建一个后台线程 KafkaThread 负责发送消息到Kafka集群</p><p>2、调用 KafkaProducer.send() 发送消息，实际上只是把消息保存到 RecordAccumulator 中；</p><p>3、RecordAccumulator 某一个批次被填满或者等待时间超过了所设定的阈值的时候，此时KafkaThread 线程就开始拉取消息，发送消息到Kafka集群</p><p>4、如果发送成功，那么返回成功；</p><p>5、如果发送失败，那么判断是否允许重试。如果不允许重试，那么返回失败的结果；如果允许重试，把消息再保存到 RecordAccumulator 中，等待后台线程 KafkaThread 再次发送。</p><h4 id="kafka的三种消息语义" tabindex="-1"><a class="header-anchor" href="#kafka的三种消息语义"><span>Kafka的三种消息语义</span></a></h4><p>在Kafka中消息存在三种语义：</p><p>1、最多一次（At most once）：消息可能会丢失，但绝不会被重复发送 ----&gt; Producer禁止重试</p><p>2、至少一次（At least once）：消息不会丢失，但有可能被重复发送 ----&gt; Producer开启了重试机制，当发送的消息没有收到Kafka集群成功的应答时会再次发送数据</p><p>3、仅有一次（Exactly once）：消息不会丢失，也不会被重复发送 ----&gt; Kafka通过<strong>幂等性</strong>和<strong>事务</strong>这两个机制保证了精准一次</p><h4 id="生产者幂等性" tabindex="-1"><a class="header-anchor" href="#生产者幂等性"><span>生产者幂等性</span></a></h4><p>生产者幂等性就是指Producer不论向Broker发送多少次重复数据，Broker端都只会持久化一条，保证了不重复。</p><blockquote><p>1、引入幂等性前，消息发送过程</p></blockquote><p>Producer向Broker发送消息，然后Broker将消息追加到消息流中后再给Producer返回Ack信号值。</p><p>实现流程如下:</p><p><img src="'+x+'" alt="image-20231215222315367"></p><p>生产中，会出现各种不确定的因素，比如在Producer在发送给Broker的时候出现网络异常。比如以下这种异常情况的出现：</p><p><img src="'+j+'" alt="image-20231215222412602"></p><p>上图这种情况，当 Producer 第一次发送消息给 Broker 时，Broker 将消息 (x2,y2) 追加到了消息流中， 但是在返回 Ack 信号给 Producer 时失败了（比如网</p><p>络异常） 。此时，Producer 端触发重试机制，将消息 (x2,y2) 重新发送给 Broker，Broker 接收到消息后，再次将该消息追加到消息流中，然后成功返回 Ack 信号给 Producer。这样下来，消息流中就被重复追加了两条相同的 (x2,y2) 的消息。</p><blockquote><p>2、引入幂等性后，消息发送过程</p></blockquote><p>Kafka为了实现幂等性，在 0.11.0 版本之后，它在底层设计架构中引入了ProducerID和SequenceNumber。</p><p>1、ProducerID：在每个新的 Producer 初始化时，会被分配一个唯一的 ProducerID，这个 ProducerID 对客户端使用者是不可见的。</p><p>2、SequenceNumber：对于每个 ProducerID，Producer <strong>发送数据</strong>的每个 Topic 和 Partition 都对应一个从 0 开始单调递增的 SequenceNumber 值。</p><p><img src="'+S+'" alt="image-20231215222702808"></p><p>同样，这是一种理想状态下的发送流程。实际情况下，会有很多不确定的因素，比如 Broker在发送Ack信号给Producer时出现网络异常，导致发送失败。</p><p>异常情况如下图所示：</p><p><img src="'+I+'" alt="image-20231215222902035"></p><p>当 Producer 发送消息 (x2,y2) 给 Broker 时，Broker 接收到消息并将其追加到消息流中。此时，Broker 返回 Ack 信号给 Producer 时，发生异常导致</p><p>Producer 接收 Ack 信号失败。对于 Producer 来说，会触发重试机制，将消息 (x2,y2) 再次发送，但是，<strong>由于引入了幂等性</strong>，在每条消息中附带</p><p>PID(ProducerID) 和 SequenceNumber。相同的 PID 和 SequenceNumber 发送给 Broker，<strong>而之前 Broker 缓存过之前发送的相同的消息</strong>，那么在消息流中</p><p>的消息就只有一条 (x2,y2)，不会出现重复发送的情况。</p><p>幂等性配置说明：</p><p><img src="'+C+`" alt="image-20231215223810522"></p><p>幂等性完整配置：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">spring</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">kafka</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">bootstrap-servers</span><span class="token punctuation">:</span> 192.168.100.102<span class="token punctuation">:</span><span class="token number">9092</span><span class="token punctuation">,</span>192.168.100.102<span class="token punctuation">:</span><span class="token number">9093</span><span class="token punctuation">,</span>192.168.100.102<span class="token punctuation">:</span><span class="token number">9094</span></span>
<span class="line">    <span class="token key atrule">producer</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">acks</span><span class="token punctuation">:</span> <span class="token number">-1</span>		<span class="token comment"># 幂等性配置必须为-1</span></span>
<span class="line">      <span class="token key atrule">retries</span><span class="token punctuation">:</span> <span class="token number">1</span>	<span class="token comment"># 幂等性配置要求，重试次数 &gt; 0</span></span>
<span class="line">      <span class="token key atrule">batch-size</span><span class="token punctuation">:</span> <span class="token number">16384</span> <span class="token comment"># 批次大小 单位byte</span></span>
<span class="line">      <span class="token key atrule">compression-type</span><span class="token punctuation">:</span> gzip</span>
<span class="line">      <span class="token key atrule">key-serializer</span><span class="token punctuation">:</span> org.apache.kafka.common.serialization.StringSerializer <span class="token comment"># key的序列化器</span></span>
<span class="line">      <span class="token key atrule">value-serializer</span><span class="token punctuation">:</span> org.apache.kafka.common.serialization.StringSerializer <span class="token comment"># value的序列化器</span></span>
<span class="line">      <span class="token key atrule">properties</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token key atrule">&#39;linger.ms&#39;</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token punctuation">,</span></span>
<span class="line">        <span class="token key atrule">&#39;interceptor.classes&#39;</span> <span class="token punctuation">:</span> <span class="token string">&quot;com.atguigu.kafka.interceptor.CustomProducerInterceptor&quot;</span> <span class="token punctuation">,</span></span>
<span class="line">        <span class="token key atrule">&#39;partitioner.class&#39;</span><span class="token punctuation">:</span> <span class="token string">&quot;org.apache.kafka.clients.producer.internals.DefaultPartitioner&quot;</span> <span class="token punctuation">,</span></span>
<span class="line">        <span class="token key atrule">&#39;enable.idempotence&#39;</span><span class="token punctuation">:</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token key atrule">&#39;max.in.flight.requests.per.connection&#39;</span><span class="token punctuation">:</span> <span class="token number">5</span>  <span class="token comment"># 幂等性配置要求该值必须小于或者等于5</span></span>
<span class="line">      <span class="token punctuation">}</span>   <span class="token comment"># 配置其他的属性</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：<strong>幂等生产者只能保证单个主题的单一分区内消息不重复</strong>；其次，它只能实现单会话上的幂等性，不能实现跨会话的幂等性，这里的会话即可以理解为：Producer 进程的一次运行。当重启了 Producer 进程之后，则幂等性保证就失效了。如果我想实现多分区以及多会话上的消息无重复，应该怎么做呢？答案就是事务！</p><h4 id="生产者事务消息" tabindex="-1"><a class="header-anchor" href="#生产者事务消息"><span>生产者事务消息</span></a></h4><p>Kafka的事务特性本质上是支持了Kafka跨分区和Topic的原子写操作。通过事务机制，KAFKA 可以实现对多个 topic 的多个 partition 的原子性的写入，即处于同一个事务内的所有消息，不管最终需要落地到哪个 topic 的哪个 partition, 最终结果都是<strong>要么全部写成功，要么全部写失败</strong>（Atomic multi-partition</p><p>writes）</p><blockquote><p>生产者事务演示</p></blockquote><p>1、在配置文件中添加事务相关配置</p><p><img src="`+P+`" alt="image-20231215232414571"></p><p>2、代码演示</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// @Transactional          // 方式一需要添加该注解，但是添加该注解事务会自动回滚</span></span>
<span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMsgTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 方式一</span></span>
<span class="line">    <span class="token comment">/*kafkaTemplate.send(&quot;topic-02&quot; , 0 , null , &quot;msg11....&quot;) ;</span>
<span class="line">        int a = 1 / 0 ;</span>
<span class="line">        kafkaTemplate.send(&quot;topic-02&quot; , 1 , null , &quot;msg12....&quot;) ;*/</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 方式二</span></span>
<span class="line">    kafkaTemplate<span class="token punctuation">.</span><span class="token function">executeInTransaction</span><span class="token punctuation">(</span>operations <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        operations<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;topic-02&quot;</span> <span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> <span class="token keyword">null</span> <span class="token punctuation">,</span> <span class="token string">&quot;msg09....&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span> <span class="token punctuation">;</span></span>
<span class="line">        operations<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;topic-02&quot;</span> <span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">,</span> <span class="token keyword">null</span> <span class="token punctuation">,</span> <span class="token string">&quot;msg10....&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">true</span> <span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：<strong>Kafka事务的回滚</strong>，并不是删除已写入的数据，而是将写入数据的事务标记为 Rollback/Abort 从而在读数据时过滤该数据。</p><h3 id="_5-3-2-消费者重复消费消息" tabindex="-1"><a class="header-anchor" href="#_5-3-2-消费者重复消费消息"><span>5.3.2 消费者重复消费消息</span></a></h3><p>解决方案：</p><p>1、进行手动位移提交</p><p>2、消费端做幂等性处理</p><p>常见的幂等性解决方案：</p><p>A. 比如我们获取到数据操作数据库，你先根据某个字段查一下数据库，如果这数据都有了，你就别插入了，执行以下update操作</p><p>B. 比如我们消费的数据需要写Redis，那没问题了，反正每次都是set，天然幂等性。</p><p>C. 比如你不是上面两个场景，那做的稍微复杂一点，你需要让生产者发送每条数据的时候，里面加一个全局唯一的 id，类似订单 id 之类的东西，然后你这里消费到了之后，先根据这个id去比如 Redis里查一下，之前消费过吗？如果没有消费过，你就处理，然后这个id写 Redis。如果消费过了，那你就别处理了，保证别重复处理相同的消息即可。</p><p>D. 比如基于数据库的唯一键来保证重复数据不会重复插入多条。因为有唯一键约束了，重复数据插入只会报错，不会导致数据库中出现脏数据。</p>`,266))])}const E=e(K,[["render",T],["__file","index.html.vue"]]),z=JSON.parse('{"path":"/docs/java/kafka/","title":"1 消息中间件概述","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"1.1 消息队列简介","slug":"_1-1-消息队列简介","link":"#_1-1-消息队列简介","children":[]},{"level":2,"title":"1.2 消息队列应用场景","slug":"_1-2-消息队列应用场景","link":"#_1-2-消息队列应用场景","children":[{"level":3,"title":"1.2.1 系统解耦","slug":"_1-2-1-系统解耦","link":"#_1-2-1-系统解耦","children":[]},{"level":3,"title":"1.2.2 流量消锋","slug":"_1-2-2-流量消锋","link":"#_1-2-2-流量消锋","children":[]},{"level":3,"title":"1.2.3 异步通信","slug":"_1-2-3-异步通信","link":"#_1-2-3-异步通信","children":[]}]},{"level":2,"title":"1.3 MQ的优缺点","slug":"_1-3-mq的优缺点","link":"#_1-3-mq的优缺点","children":[]},{"level":2,"title":"1.4 Kafka简介","slug":"_1-4-kafka简介","link":"#_1-4-kafka简介","children":[]},{"level":2,"title":"1.5 MQ产品比对","slug":"_1-5-mq产品比对","link":"#_1-5-mq产品比对","children":[]},{"level":2,"title":"2.1 Kafka集群机制","slug":"_2-1-kafka集群机制","link":"#_2-1-kafka集群机制","children":[]},{"level":2,"title":"2.2 Kafka基础架构","slug":"_2-2-kafka基础架构","link":"#_2-2-kafka基础架构","children":[]},{"level":2,"title":"2.3 Kafka集群搭建","slug":"_2-3-kafka集群搭建","link":"#_2-3-kafka集群搭建","children":[]},{"level":2,"title":"2.4 Kafka集群测试","slug":"_2-4-kafka集群测试","link":"#_2-4-kafka集群测试","children":[]},{"level":2,"title":"3.1 发送消息","slug":"_3-1-发送消息","link":"#_3-1-发送消息","children":[]},{"level":2,"title":"3.2 消费消息","slug":"_3-2-消费消息","link":"#_3-2-消费消息","children":[]},{"level":2,"title":"4.1 生产者","slug":"_4-1-生产者","link":"#_4-1-生产者","children":[{"level":3,"title":"4.1.1 环境搭建","slug":"_4-1-1-环境搭建","link":"#_4-1-1-环境搭建","children":[]},{"level":3,"title":"4.1.2 发送消息","slug":"_4-1-2-发送消息","link":"#_4-1-2-发送消息","children":[]},{"level":3,"title":"4.1.3 发送方式","slug":"_4-1-3-发送方式","link":"#_4-1-3-发送方式","children":[]},{"level":3,"title":"4.1.4 拦截器配置","slug":"_4-1-4-拦截器配置","link":"#_4-1-4-拦截器配置","children":[]},{"level":3,"title":"4.1.5 使用CompletableFuture","slug":"_4-1-5-使用completablefuture","link":"#_4-1-5-使用completablefuture","children":[]},{"level":3,"title":"4.1.6 分区","slug":"_4-1-6-分区","link":"#_4-1-6-分区","children":[]},{"level":3,"title":"4.1.7 生产者常见属性","slug":"_4-1-7-生产者常见属性","link":"#_4-1-7-生产者常见属性","children":[]}]},{"level":2,"title":"4.2 消费者","slug":"_4-2-消费者","link":"#_4-2-消费者","children":[{"level":3,"title":"4.2.1 环境搭建","slug":"_4-2-1-环境搭建","link":"#_4-2-1-环境搭建","children":[]},{"level":3,"title":"4.2.2 接收消息","slug":"_4-2-2-接收消息","link":"#_4-2-2-接收消息","children":[]},{"level":3,"title":"4.2.3 手动位移提交","slug":"_4-2-3-手动位移提交","link":"#_4-2-3-手动位移提交","children":[]},{"level":3,"title":"4.2.4 消费异常处理","slug":"_4-2-4-消费异常处理","link":"#_4-2-4-消费异常处理","children":[]}]},{"level":2,"title":"5.1 消息可靠性传输","slug":"_5-1-消息可靠性传输","link":"#_5-1-消息可靠性传输","children":[]},{"level":2,"title":"5.2 消息顺序消费问题","slug":"_5-2-消息顺序消费问题","link":"#_5-2-消息顺序消费问题","children":[]},{"level":2,"title":"5.3 消息重复消费问题","slug":"_5-3-消息重复消费问题","link":"#_5-3-消息重复消费问题","children":[{"level":3,"title":"5.3.1 生产者重复发送消息","slug":"_5-3-1-生产者重复发送消息","link":"#_5-3-1-生产者重复发送消息","children":[]},{"level":3,"title":"5.3.2 消费者重复消费消息","slug":"_5-3-2-消费者重复消费消息","link":"#_5-3-2-消费者重复消费消息","children":[]}]}],"git":{"updatedTime":1728319555000,"contributors":[{"name":"GlobalXiaoHua","email":"409732463@qq.com","commits":1}]},"filePathRelative":"docs/java/kafka/README.md"}');export{E as comp,z as data};
